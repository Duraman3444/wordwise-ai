import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PDFExportOptions {
  title: string;
  content: string;
  author?: string;
  includeMetadata?: boolean;
  includeWordCount?: boolean;
  fontSize?: number;
  lineSpacing?: number;
}

export class PDFExportService {
  /**
   * Export document content as a professional PDF
   */
  static async exportToPDF(options: PDFExportOptions): Promise<void> {
    const {
      title,
      content,
      author = 'WordWise AI User',
      includeMetadata = true,
      includeWordCount = true,
      fontSize = 12,
      lineSpacing = 1.5
    } = options;

    try {
      // Create new PDF document
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Set document properties
      if (includeMetadata) {
        pdf.setProperties({
          title: title,
          author: author,
          creator: 'WordWise AI',
          producer: 'WordWise AI - AI-Powered Writing Assistant',
          subject: 'Document created with WordWise AI',
          keywords: 'writing, grammar, AI, document'
        });
      }

      // Page dimensions
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const contentWidth = pageWidth - (margin * 2);
      const contentHeight = pageHeight - (margin * 2);

      let yPosition = margin;

      // Add header with title
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text(title, margin, yPosition);
      yPosition += 15;

      // Add metadata section
      if (includeMetadata) {
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(100, 100, 100);
        
        const currentDate = new Date().toLocaleDateString();
        pdf.text(`Created: ${currentDate}`, margin, yPosition);
        yPosition += 5;
        
        pdf.text(`Author: ${author}`, margin, yPosition);
        yPosition += 5;
        
        if (includeWordCount) {
          const wordCount = this.countWords(content);
          const charCount = content.length;
          pdf.text(`Words: ${wordCount} | Characters: ${charCount}`, margin, yPosition);
          yPosition += 5;
        }
        
        pdf.text('Generated by WordWise AI', margin, yPosition);
        yPosition += 15;
      }

      // Add separator line
      pdf.setDrawColor(200, 200, 200);
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 10;

      // Reset text color for content
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(fontSize);
      pdf.setFont('helvetica', 'normal');

      // Process content - split into paragraphs and handle text wrapping
      const cleanContent = this.cleanHTMLContent(content);
      const paragraphs = cleanContent.split('\n\n').filter(p => p.trim());

      for (const paragraph of paragraphs) {
        // Check if we need a new page
        if (yPosition > contentHeight - 20) {
          pdf.addPage();
          yPosition = margin;
        }

        // Split text to fit page width
        const lines = pdf.splitTextToSize(paragraph.trim(), contentWidth);
        
        // Add each line
        for (const line of lines) {
          // Check if we need a new page for this line
          if (yPosition > contentHeight - 10) {
            pdf.addPage();
            yPosition = margin;
          }
          
          pdf.text(line, margin, yPosition);
          yPosition += fontSize * lineSpacing * 0.35; // Convert to mm
        }
        
        // Add paragraph spacing
        yPosition += 5;
      }

      // Add footer with page numbers
      const totalPages = (pdf as any).internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(150, 150, 150);
        pdf.text(
          `Page ${i} of ${totalPages}`,
          pageWidth - margin - 20,
          pageHeight - 10
        );
        
        // Add WordWise AI branding in footer
        pdf.text(
          'Created with WordWise AI',
          margin,
          pageHeight - 10
        );
      }

      // Save the PDF
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
      pdf.save(fileName);

      console.log(`✅ PDF exported successfully: ${fileName}`);
    } catch (error) {
      console.error('❌ Error exporting PDF:', error);
      throw new Error('Failed to export PDF. Please try again.');
    }
  }

  /**
   * Export document with visual formatting (experimental)
   * This method captures the visual appearance of the editor
   */
  static async exportVisualPDF(
    elementId: string,
    title: string,
    options: Partial<PDFExportOptions> = {}
  ): Promise<void> {
    try {
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error('Element not found for PDF export');
      }

      // Create canvas from the element
      const canvas = await html2canvas(element, {
        scale: 2, // Higher quality
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });

      const imgData = canvas.toDataURL('image/png');
      
      // Calculate dimensions
      const imgWidth = 210; // A4 width in mm
      const pageHeight = 295; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      const pdf = new jsPDF('p', 'mm', 'a4');
      let position = 0;

      // Set metadata
      pdf.setProperties({
        title: title,
        creator: 'WordWise AI',
        producer: 'WordWise AI - AI-Powered Writing Assistant'
      });

      // Add image to PDF
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      // Save the PDF
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_visual.pdf`;
      pdf.save(fileName);

      console.log(`✅ Visual PDF exported successfully: ${fileName}`);
    } catch (error) {
      console.error('❌ Error exporting visual PDF:', error);
      throw new Error('Failed to export visual PDF. Please try again.');
    }
  }

  /**
   * Clean HTML content for plain text export
   */
  private static cleanHTMLContent(htmlContent: string): string {
    // Create a temporary div to parse HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;
    
    // Get text content and preserve paragraph breaks
    const textContent = tempDiv.textContent || tempDiv.innerText || '';
    
    // Clean up extra whitespace and normalize line breaks
    return textContent
      .replace(/\s+/g, ' ') // Replace multiple spaces with single space
      .replace(/\n\s*\n/g, '\n\n') // Preserve paragraph breaks
      .trim();
  }

  /**
   * Count words in text content
   */
  private static countWords(text: string): number {
    const cleanText = this.cleanHTMLContent(text);
    return cleanText.trim() ? cleanText.trim().split(/\s+/).length : 0;
  }

  /**
   * Generate PDF with writing statistics and suggestions summary
   */
  static async exportWithAnalytics(options: PDFExportOptions & {
    writingScore?: number;
    suggestions?: Array<{type: string; message: string; originalText: string}>;
    analytics?: {
      readingTime: string;
      sentenceCount: number;
      avgWordsPerSentence: number;
    };
  }): Promise<void> {
    const {
      title,
      content,
      author = 'WordWise AI User',
      writingScore,
      suggestions = [],
      analytics
    } = options;

    try {
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Set document properties
      pdf.setProperties({
        title: `${title} - Analysis Report`,
        author: author,
        creator: 'WordWise AI',
        producer: 'WordWise AI - Writing Analysis Report'
      });

      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      let yPosition = margin;

      // Title
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${title} - Writing Analysis`, margin, yPosition);
      yPosition += 20;

      // Writing Score Section
      if (writingScore !== undefined) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Writing Score', margin, yPosition);
        yPosition += 10;

        pdf.setFontSize(24);
        pdf.setTextColor(writingScore >= 90 ? 0 : writingScore >= 70 ? 255 : 255, 
                          writingScore >= 90 ? 150 : writingScore >= 70 ? 165 : 0, 
                          writingScore >= 90 ? 0 : 0);
        pdf.text(`${writingScore}/100`, margin, yPosition);
        pdf.setTextColor(0, 0, 0);
        yPosition += 15;
      }

      // Analytics Section
      if (analytics) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Document Statistics', margin, yPosition);
        yPosition += 10;

        pdf.setFontSize(11);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`Word Count: ${this.countWords(content)}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Character Count: ${content.length}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Sentence Count: ${analytics.sentenceCount}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Average Words per Sentence: ${analytics.avgWordsPerSentence}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Estimated Reading Time: ${analytics.readingTime}`, margin, yPosition);
        yPosition += 15;
      }

      // Suggestions Summary
      if (suggestions.length > 0) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Improvement Suggestions', margin, yPosition);
        yPosition += 10;

        const suggestionsByType = suggestions.reduce((acc, suggestion) => {
          if (!acc[suggestion.type]) acc[suggestion.type] = [];
          acc[suggestion.type].push(suggestion);
          return acc;
        }, {} as Record<string, typeof suggestions>);

        for (const [type, typeSuggestions] of Object.entries(suggestionsByType)) {
          pdf.setFontSize(12);
          pdf.setFont('helvetica', 'bold');
          pdf.text(`${type.charAt(0).toUpperCase() + type.slice(1)} (${typeSuggestions.length})`, margin, yPosition);
          yPosition += 8;

          pdf.setFontSize(10);
          pdf.setFont('helvetica', 'normal');
          
          for (const suggestion of typeSuggestions.slice(0, 5)) { // Limit to 5 per type
            const lines = pdf.splitTextToSize(`• ${suggestion.message}`, pageWidth - margin * 2 - 10);
            for (const line of lines) {
              if (yPosition > pageHeight - 30) {
                pdf.addPage();
                yPosition = margin;
              }
              pdf.text(line, margin + 5, yPosition);
              yPosition += 5;
            }
          }
          yPosition += 5;
        }
      }

      // Add new page for document content
      pdf.addPage();
      yPosition = margin;

      // Document Content
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Document Content', margin, yPosition);
      yPosition += 15;

      // Add the actual content
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      const cleanContent = this.cleanHTMLContent(content);
      const contentLines = pdf.splitTextToSize(cleanContent, pageWidth - margin * 2);

      for (const line of contentLines) {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = margin;
        }
        pdf.text(line, margin, yPosition);
        yPosition += 6;
      }

      // Save with analytics suffix
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_analysis.pdf`;
      pdf.save(fileName);

      console.log(`✅ Analytics PDF exported successfully: ${fileName}`);
    } catch (error) {
      console.error('❌ Error exporting analytics PDF:', error);
      throw new Error('Failed to export analytics PDF. Please try again.');
    }
  }
}

export default PDFExportService; 