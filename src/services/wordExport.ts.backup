import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';

export interface WordExportOptions {
  title: string;
  content: string;
  author?: string;
  includeMetadata?: boolean;
  includeWordCount?: boolean;
  fontSize?: number;
}

export class WordExportService {
  /**
   * Export document content as a Word document (.docx)
   */
  static async exportToWord(options: WordExportOptions): Promise<void> {
    const {
      title,
      content,
      author = 'WordWise AI User',
      includeMetadata = true,
      includeWordCount = true,
      fontSize = 12
    } = options;

    try {
      // Clean HTML content and convert to plain text
      const cleanContent = this.cleanHTMLContent(content);
      const paragraphs = cleanContent.split('\n\n').filter(p => p.trim());
      
      // Create document sections
      const documentChildren: (Paragraph)[] = [];

      // Add title
      documentChildren.push(
        new Paragraph({
          children: [
            new TextRun({
              text: title,
              bold: true,
              size: Math.round((fontSize + 6) * 2), // Convert to half-points
            }),
          ],
          heading: HeadingLevel.TITLE,
          alignment: AlignmentType.CENTER,
          spacing: {
            after: 400, // 20pt spacing after
          },
        })
      );

      // Add metadata section if enabled
      if (includeMetadata) {
        const currentDate = new Date().toLocaleDateString();
        const wordCount = this.countWords(cleanContent);
        const charCount = cleanContent.length;

        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: `Created: ${currentDate}`,
                italics: true,
                size: Math.round((fontSize - 2) * 2),
                color: '666666',
              }),
            ],
            spacing: { after: 120 },
          })
        );

        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: `Author: ${author}`,
                italics: true,
                size: Math.round((fontSize - 2) * 2),
                color: '666666',
              }),
            ],
            spacing: { after: 120 },
          })
        );

        if (includeWordCount) {
          documentChildren.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: `Words: ${wordCount} | Characters: ${charCount}`,
                  italics: true,
                  size: Math.round((fontSize - 2) * 2),
                  color: '666666',
                }),
              ],
              spacing: { after: 120 },
            })
          );
        }

        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: 'Generated by WordWise AI',
                italics: true,
                size: Math.round((fontSize - 2) * 2),
                color: '666666',
              }),
            ],
            spacing: { after: 400 }, // Extra spacing before content
          })
        );
      }

      // Add content paragraphs
      paragraphs.forEach((paragraph, index) => {
        if (paragraph.trim()) {
          documentChildren.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: paragraph.trim(),
                  size: Math.round(fontSize * 2), // Convert to half-points
                }),
              ],
              spacing: {
                after: 200, // 10pt spacing after each paragraph
                line: Math.round(fontSize * 2 * 1.15), // 1.15 line spacing
              },
            })
          );
        }
      });

      // Create the document
      const doc = new Document({
        creator: 'WordWise AI',
        title: title,
        description: 'Document created with WordWise AI - AI-Powered Writing Assistant',
        sections: [
          {
            properties: {},
            children: documentChildren,
          },
        ],
      });

      // Generate and save the document
      const blob = await Packer.toBlob(doc);
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.docx`;
      
      saveAs(blob, fileName);

      console.log(`✅ Word document exported successfully: ${fileName}`);
    } catch (error) {
      console.error('❌ Error exporting Word document:', error);
      throw new Error('Failed to export Word document. Please try again.');
    }
  }

  /**
   * Export document with formatting preserved from HTML content
   */
  static async exportToWordWithFormatting(options: WordExportOptions): Promise<void> {
    const {
      title,
      content,
      author = 'WordWise AI User',
      includeMetadata = true,
      includeWordCount = true,
      fontSize = 12
    } = options;

    try {
      // Parse HTML content and convert to structured paragraphs
      const documentChildren: (Paragraph)[] = [];

      // Add title
      documentChildren.push(
        new Paragraph({
          children: [
            new TextRun({
              text: title,
              bold: true,
              size: Math.round((fontSize + 6) * 2),
            }),
          ],
          heading: HeadingLevel.TITLE,
          alignment: AlignmentType.CENTER,
          spacing: { after: 400 },
        })
      );

      // Add metadata if enabled
      if (includeMetadata) {
        const currentDate = new Date().toLocaleDateString();
        const cleanContent = this.cleanHTMLContent(content);
        const wordCount = this.countWords(cleanContent);
        const charCount = cleanContent.length;

        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: `Created: ${currentDate} | Author: ${author}`,
                italics: true,
                size: Math.round((fontSize - 2) * 2),
                color: '666666',
              }),
            ],
            spacing: { after: 120 },
          })
        );

        if (includeWordCount) {
          documentChildren.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: `Words: ${wordCount} | Characters: ${charCount}`,
                  italics: true,
                  size: Math.round((fontSize - 2) * 2),
                  color: '666666',
                }),
              ],
              spacing: { after: 400 },
            })
          );
        }
      }

      // Parse HTML content more intelligently
      const formattedParagraphs = this.parseHTMLContent(content, fontSize);
      documentChildren.push(...formattedParagraphs);

      // Create the document
      const doc = new Document({
        creator: 'WordWise AI',
        title: title,
        description: 'Document with formatting created by WordWise AI',
        sections: [
          {
            properties: {},
            children: documentChildren,
          },
        ],
      });

      // Generate and save the document
      const blob = await Packer.toBlob(doc);
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_formatted.docx`;
      
      saveAs(blob, fileName);

      console.log(`✅ Formatted Word document exported successfully: ${fileName}`);
    } catch (error) {
      console.error('❌ Error exporting formatted Word document:', error);
      throw new Error('Failed to export formatted Word document. Please try again.');
    }
  }

  /**
   * Parse HTML content and convert to Word paragraphs with basic formatting
   */
  private static parseHTMLContent(htmlContent: string, fontSize: number): Paragraph[] {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;
    
    const paragraphs: Paragraph[] = [];
    const elements = tempDiv.querySelectorAll('p, h1, h2, h3, h4, h5, h6, div');
    
    if (elements.length === 0) {
      // If no structured elements, treat as plain text
      const cleanText = this.cleanHTMLContent(htmlContent);
      const textParagraphs = cleanText.split('\n\n').filter(p => p.trim());
      
      textParagraphs.forEach(text => {
        paragraphs.push(
          new Paragraph({
            children: [
              new TextRun({
                text: text.trim(),
                size: Math.round(fontSize * 2),
              }),
            ],
            spacing: { after: 200 },
          })
        );
      });
    } else {
      elements.forEach(element => {
        const text = element.textContent?.trim();
        if (!text) return;

        const tagName = element.tagName.toLowerCase();
        let isHeading = false;
        let headingLevel: HeadingLevel | undefined;
        let textSize = Math.round(fontSize * 2);
        let isBold = false;

        // Handle headings
        switch (tagName) {
          case 'h1':
            isHeading = true;
            headingLevel = HeadingLevel.HEADING_1;
            textSize = Math.round((fontSize + 8) * 2);
            isBold = true;
            break;
          case 'h2':
            isHeading = true;
            headingLevel = HeadingLevel.HEADING_2;
            textSize = Math.round((fontSize + 6) * 2);
            isBold = true;
            break;
          case 'h3':
            isHeading = true;
            headingLevel = HeadingLevel.HEADING_3;
            textSize = Math.round((fontSize + 4) * 2);
            isBold = true;
            break;
          case 'h4':
            isHeading = true;
            headingLevel = HeadingLevel.HEADING_4;
            textSize = Math.round((fontSize + 2) * 2);
            isBold = true;
            break;
          case 'h5':
            isHeading = true;
            headingLevel = HeadingLevel.HEADING_5;
            textSize = Math.round((fontSize + 1) * 2);
            isBold = true;
            break;
          case 'h6':
            isHeading = true;
            headingLevel = HeadingLevel.HEADING_6;
            textSize = Math.round(fontSize * 2);
            isBold = true;
            break;
        }

        paragraphs.push(
          new Paragraph({
            children: [
              new TextRun({
                text: text,
                size: textSize,
                bold: isBold,
              }),
            ],
            heading: headingLevel,
            spacing: { 
              after: isHeading ? 300 : 200,
              before: isHeading ? 300 : 0,
            },
          })
        );
      });
    }

    return paragraphs;
  }

  /**
   * Clean HTML content for plain text export
   */
  private static cleanHTMLContent(htmlContent: string): string {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;
    
    const textContent = tempDiv.textContent || tempDiv.innerText || '';
    
    return textContent
      .replace(/\s+/g, ' ')
      .replace(/\n\s*\n/g, '\n\n')
      .trim();
  }

  /**
   * Count words in text content
   */
  private static countWords(text: string): number {
    const cleanText = this.cleanHTMLContent(text);
    return cleanText.trim() ? cleanText.trim().split(/\s+/).length : 0;
  }

  /**
   * Export document with writing analytics and suggestions
   */
  static async exportWithAnalytics(options: WordExportOptions & {
    writingScore?: number;
    suggestions?: Array<{type: string; message: string; originalText: string}>;
    analytics?: {
      readingTime: string;
      sentenceCount: number;
      avgWordsPerSentence: number;
    };
  }): Promise<void> {
    const {
      title,
      content,
      author = 'WordWise AI User',
      writingScore,
      suggestions = [],
      analytics
    } = options;

    try {
      const cleanContent = this.cleanHTMLContent(content);
      const wordCount = this.countWords(cleanContent);
      const documentChildren: (Paragraph)[] = [];

      // Title
      documentChildren.push(
        new Paragraph({
          children: [
            new TextRun({
              text: `${title} - Writing Analysis`,
              bold: true,
              size: 32,
            }),
          ],
          heading: HeadingLevel.TITLE,
          alignment: AlignmentType.CENTER,
          spacing: { after: 600 },
        })
      );

      // Writing Score Section
      if (writingScore !== undefined) {
        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: 'Writing Score',
                bold: true,
                size: 28,
              }),
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { after: 200 },
          })
        );

        const scoreColor = writingScore >= 90 ? '008000' : writingScore >= 70 ? 'FFA500' : 'FF0000';
        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: `${writingScore}/100`,
                bold: true,
                size: 48,
                color: scoreColor,
              }),
            ],
            spacing: { after: 400 },
          })
        );
      }

      // Analytics Section
      if (analytics) {
        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: 'Document Statistics',
                bold: true,
                size: 28,
              }),
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { after: 200 },
          })
        );

        const stats = [
          `Word Count: ${wordCount}`,
          `Character Count: ${content.length}`,
          `Sentence Count: ${analytics.sentenceCount}`,
          `Average Words per Sentence: ${analytics.avgWordsPerSentence}`,
          `Estimated Reading Time: ${analytics.readingTime}`
        ];

        stats.forEach(stat => {
          documentChildren.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: `• ${stat}`,
                  size: 22,
                }),
              ],
              spacing: { after: 120 },
            })
          );
        });

        documentChildren.push(new Paragraph({ children: [], spacing: { after: 400 } }));
      }

      // Suggestions Summary
      if (suggestions.length > 0) {
        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: 'Improvement Suggestions',
                bold: true,
                size: 28,
              }),
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { after: 200 },
          })
        );

        const suggestionsByType = suggestions.reduce((acc, suggestion) => {
          if (!acc[suggestion.type]) acc[suggestion.type] = [];
          acc[suggestion.type].push(suggestion);
          return acc;
        }, {} as Record<string, typeof suggestions>);

        for (const [type, typeSuggestions] of Object.entries(suggestionsByType)) {
          documentChildren.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: `${type.charAt(0).toUpperCase() + type.slice(1)} (${typeSuggestions.length})`,
                  bold: true,
                  size: 24,
                }),
              ],
              heading: HeadingLevel.HEADING_2,
              spacing: { after: 160 },
            })
          );

          typeSuggestions.slice(0, 5).forEach(suggestion => {
            documentChildren.push(
              new Paragraph({
                children: [
                  new TextRun({
                    text: `• ${suggestion.message}`,
                    size: 20,
                  }),
                ],
                spacing: { after: 100 },
              })
            );
          });

          documentChildren.push(new Paragraph({ children: [], spacing: { after: 200 } }));
        }
      }

      // Document Content Section
      documentChildren.push(
        new Paragraph({
          children: [
            new TextRun({
              text: 'Document Content',
              bold: true,
              size: 28,
            }),
          ],
          heading: HeadingLevel.HEADING_1,
          spacing: { after: 300, before: 400 },
        })
      );

      // Add the actual content
      const contentParagraphs = cleanContent.split('\n\n').filter(p => p.trim());
      contentParagraphs.forEach(text => {
        documentChildren.push(
          new Paragraph({
            children: [
              new TextRun({
                text: text.trim(),
                size: 24,
              }),
            ],
            spacing: { after: 200 },
          })
        );
      });

      // Create the document
      const doc = new Document({
        creator: 'WordWise AI',
        title: `${title} - Analysis Report`,
        description: 'Writing analysis report created by WordWise AI',
        sections: [
          {
            properties: {},
            children: documentChildren,
          },
        ],
      });

      // Generate and save the document
      const blob = await Packer.toBlob(doc);
      const fileName = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_analysis.docx`;
      
      saveAs(blob, fileName);

      console.log(`✅ Analytics Word document exported successfully: ${fileName}`);
    } catch (error) {
      console.error('❌ Error exporting analytics Word document:', error);
      throw new Error('Failed to export analytics Word document. Please try again.');
    }
  }
}